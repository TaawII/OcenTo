extends ../layout

block content
  doctype html
  html
    head
      link(rel="stylesheet", href="/stylesheets/panel/create-event.css")
      script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js")
    body
      .form-header
        h2 Dodawanie Wydarzenia

      form(action="/events/create" method="POST" enctype="multipart/form-data")
        // Pole dla nazwy wydarzenia (wymagane)
        .field-row
          label(for="title") Nazwa Wydarzenia:
          input(type="text", name="title", placeholder="Wpisz nazwę wydarzenia" required)

        // Pole dla daty rozpoczęcia (wymagane)
        .field-row
          label(for="start_time") Data rozpoczęcia:
          input(type="datetime-local", id="start_time", name="start_time" required)

        // Pole dla daty zakończenia (wymagane)
        .field-row
          label(for="end_time") Data zakończenia:
          input(type="datetime-local", id="end_time", name="end_time" required)

        // Kategorie
        .field-row
          label(for="categories") Kategorie:
          .checkbox-group#categoriesGroup
            each category in categories
              div
                input(type="checkbox", name="categories", value=category, id=category)
                label(for=category)= category

        // Pole dla prywatności wydarzenia
        .field-row
          label
            | Prywatne Wydarzenie 
            input(type="checkbox" name="is_private" id="is_private")
            

        // Pole dla hasła (domyślnie wyłączone)
        .field-row
          label(for="password") Hasło:
          .password-container
            input(type="password", name="password", id="showPassword", placeholder="Wpisz hasło" disabled)
            button(type="button" id="togglePassword" class="toggle-password") &#128065;

        // Dynamiczne pola dla właściwości przedmiotów
        .field-row
          label(for="item_properties") Właściwości Przedmiotów:
        .fields-container
          .field-row
            input(type="text" name="item_properties" placeholder="Nazwa właściwości" required)
            input(type="text" name="default_values" placeholder="Domyślna wartość" required)
            button(type="button" class="remove-field") - Usuń

        button(type="button", id="add-field") + Dodaj Nową Właściwość

        // Pole dla obrazka wydarzenia (wymagane)
        .field-row
          label(for="image") Obrazek wydarzenia:
          input(type="file", name="image" accept="image/*" required)

        // Przycisk tworzenia wydarzenia
        button(type="submit") Dodaj Wydarzenie

      script.
        document.addEventListener('DOMContentLoaded', function() {
          const startTimeField = document.getElementById('start_time');
          const endTimeField = document.getElementById('end_time');

          // Sprawdzanie zgodności dat
          function validateDates() {
            const now = new Date();
            const startTime = new Date(startTimeField.value);
            const endTime = new Date(endTimeField.value);

            // Walidacja daty rozpoczęcia
            if (startTime < now) {
              alert('Data rozpoczęcia nie może być wcześniejsza niż aktualna data!');
              startTimeField.value = '';
            }

            // Walidacja daty zakończenia
            if (endTime < startTime) {
              alert('Data zakończenia nie może być wcześniejsza niż data rozpoczęcia!');
              endTimeField.value = '';
            }
          }

          // Obsługa zmian w polach daty
          startTimeField.addEventListener('change', validateDates);
          endTimeField.addEventListener('change', validateDates);

          // Obsługa dynamicznego dodawania/usuwania pól
          const addButton = document.getElementById('add-field');
          const fieldsContainer = document.querySelector('.fields-container');

          addButton.addEventListener('click', function() {
            const newFieldRow = document.createElement('div');
            newFieldRow.classList.add('field-row');
            newFieldRow.innerHTML = `
              <input type="text" name="item_properties" placeholder="Nazwa właściwości" required>
              <input type="text" name="default_values" placeholder="Domyślna wartość" required>
              <button type="button" class="remove-field">- Usuń</button>
            `;

            newFieldRow.querySelector('.remove-field').addEventListener('click', function() {
              newFieldRow.remove();
            });

            fieldsContainer.appendChild(newFieldRow);
          });

          document.querySelectorAll('.remove-field').forEach(button => {
            button.addEventListener('click', function(event) {
              event.target.closest('.field-row').remove();
            });
          });

          const isPrivateCheckbox = document.getElementById('is_private');
          const passwordField = document.getElementById('showPassword');

          isPrivateCheckbox.addEventListener('change', function() {
            passwordField.disabled = !this.checked;
            if (!this.checked) {
              passwordField.value = '';
            }
          });
          const togglePassword = document.getElementById("togglePassword");
          const passwordInput = document.getElementById("showPassword");

          togglePassword.addEventListener("click", function () {
          const type = passwordInput.type === "password" ? "text" : "password";
          passwordInput.type = type;
          this.innerHTML = type === "password" ? "&#128064;" : "&#128065;"; 
           });
        const form = document.querySelector('form'); 
        const categoriesGroup = document.getElementById('categoriesGroup'); 
        const categoryCheckboxes = categoriesGroup.querySelectorAll('input[type="checkbox"]'); 

        form.addEventListener('submit', function (e) {
        const isAnyChecked = Array.from(categoryCheckboxes).some(checkbox => checkbox.checked);

        if (!isAnyChecked) {
          e.preventDefault(); 
          alert('Musisz wybrać przynajmniej jedną kategorię!');
          categoriesGroup.classList.add('error'); 
        } else {
          categoriesGroup.classList.remove('error'); 
        }
       });
        });
